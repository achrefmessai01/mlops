services:
  # Application MLOps
  mlops-app:
    build: 
      context: .
      dockerfile: app/Dockerfile
    container_name: mlops-app
    ports:
      - "8000:8000"
    environment:
      # Configuration des modèles IA
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # Configuration Langfuse LOCAL
      - LANGFUSE_SECRET_KEY=sk-lf-local-secret-key
      - LANGFUSE_PUBLIC_KEY=pk-lf-local-public-key
      - LANGFUSE_HOST=http://langfuse:3000
      
      # Configuration PostgreSQL
      - POSTGRES_DB=mlops
      - POSTGRES_USER=mlops
      - POSTGRES_PASSWORD=mlops123
      - POSTGRES_HOST=mlops-postgres
      - POSTGRES_PORT=5432
      
      # Configuration de base
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./exports:/app/exports
      - ./app/model_api_keys.env:/app/model_api_keys.env:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres
      - langfuse
      
  # Redis pour le cache
  redis:
    image: redis:7-alpine
    container_name: mlops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # PostgreSQL pour les données MLOps
  postgres:
    image: postgres:15-alpine
    container_name: mlops-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mlops
      - POSTGRES_USER=mlops
      - POSTGRES_PASSWORD=mlops123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/postgres:/docker-entrypoint-initdb.d
    restart: unless-stopped

  # PostgreSQL pour Langfuse
  langfuse-postgres:
    image: postgres:15-alpine
    container_name: langfuse-postgres
    environment:
      - POSTGRES_DB=langfuse
      - POSTGRES_USER=langfuse
      - POSTGRES_PASSWORD=langfuse123
    volumes:
      - langfuse_postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U langfuse -d langfuse"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClickHouse pour Langfuse v3 - CONFIGURATION CORRIGÉE
  clickhouse:
    image: clickhouse/clickhouse-server:24.1
    container_name: langfuse-clickhouse
    environment:
      - CLICKHOUSE_DB=langfuse
      - CLICKHOUSE_USER=langfuse
      - CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT=1
      - CLICKHOUSE_PASSWORD=langfuse123
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse-init:/docker-entrypoint-initdb.d
    ports:
      - "8123:8123"
      - "9000:9000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Langfuse LOCAL v3 - CONFIGURATION FINALE CORRIGÉE
  langfuse:
    image: langfuse/langfuse:latest
    container_name: langfuse
    ports:
      - "3001:3000"
    environment:
      # Base de données PostgreSQL
      - DATABASE_URL=postgresql://langfuse:langfuse123@langfuse-postgres:5432/langfuse
      
      # ClickHouse pour v3 - FORMAT CORRECT
      - CLICKHOUSE_URL=http://langfuse:langfuse123@clickhouse:8123/langfuse
      - CLICKHOUSE_USER=langfuse
      - CLICKHOUSE_PASSWORD=langfuse123
      
      # Configuration Langfuse
      - NEXTAUTH_SECRET=your-secret-key-here-change-in-production-12345678901234567890
      - NEXTAUTH_URL=http://localhost:3001
      - SALT=your-salt-here-change-in-production-1234567890
      - ENCRYPTION_KEY=0123456789abcdef0123456789abcdef
      
      # Features
      - LANGFUSE_ENABLE_EXPERIMENTAL_FEATURES=true
      - LANGFUSE_DEFAULT_PROJECT_ID=default
      - LANGFUSE_DEFAULT_PROJECT_SECRET_KEY=sk-lf-local-secret-key
      - LANGFUSE_DEFAULT_PROJECT_PUBLIC_KEY=pk-lf-local-public-key
      
      # Désactiver ClickHouse temporairement pour debug
      - LANGFUSE_DISABLE_CLICKHOUSE=false
      
    depends_on:
      langfuse-postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/public/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus pour les métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: mlops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - mlops-app

  # Grafana pour les dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mlops-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: mlops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./monitoring/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    depends_on:
      - mlops-app
      - grafana
      - langfuse

volumes:
  redis_data:
  postgres_data:
  langfuse_postgres_data:
  clickhouse_data:
  prometheus_data:
  grafana_data: