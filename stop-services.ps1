# Script pour arr√™ter proprement tous les services MLOps
param(
    [switch]$RemoveVolumes = $false
)

Write-Host "=== Arr√™t des Services MLOps ===" -ForegroundColor Yellow

# Arr√™ter tous les services
Write-Host "üõë Arr√™t des conteneurs..." -ForegroundColor Cyan
try {
    if ($RemoveVolumes) {
        docker-compose down -v
        Write-Host "‚úÖ Services arr√™t√©s et volumes supprim√©s" -ForegroundColor Green
    } else {
        docker-compose down
        Write-Host "‚úÖ Services arr√™t√©s (volumes conserv√©s)" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ö†Ô∏è Erreur lors de l'arr√™t: $($_.Exception.Message)" -ForegroundColor Red
}

# V√©rifier que tout est arr√™t√©
Write-Host "`nüìä V√©rification..." -ForegroundColor Cyan
$containers = docker ps -a --filter "name=mlops" --format "{{.Names}}" 2>$null
if ($containers) {
    Write-Host "‚ö†Ô∏è Conteneurs encore pr√©sents:" -ForegroundColor Yellow
    $containers | ForEach-Object { Write-Host "   - $_" -ForegroundColor White }
} else {
    Write-Host "‚úÖ Tous les conteneurs MLOps sont arr√™t√©s" -ForegroundColor Green
}

# Afficher l'utilisation des ports
Write-Host "`nüîå Ports lib√©r√©s:" -ForegroundColor Cyan
$ports = @(8000, 3001, 3000, 9090, 5432, 6379, 8123)
foreach ($port in $ports) {
    $connection = Test-NetConnection -ComputerName localhost -Port $port -InformationLevel Quiet -WarningAction SilentlyContinue
    if ($connection) {
        Write-Host "   ‚ö†Ô∏è Port $port encore utilis√©" -ForegroundColor Yellow
    } else {
        Write-Host "   ‚úÖ Port $port lib√©r√©" -ForegroundColor Green
    }
}

Write-Host "`n‚úÖ Arr√™t termin√©!" -ForegroundColor Green